# Generated by Django 3.2.6 on 2022-08-24 05:28

import uuid

import django.db.models.deletion

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Database",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="A description of the database. More information if no url can be provided.",
                        null=True,
                    ),
                ),
                ("url", models.URLField(null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DatabaseReference",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("db_xref", models.CharField(max_length=50, null=True)),
                (
                    "text",
                    models.CharField(
                        help_text="Original text of the reference",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "database",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dnarecords.database",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Environment",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="A description of the environment or type of environment.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Sequence",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("locus", models.TextField(null=True)),
                ("accession", models.CharField(max_length=50, null=True)),
                ("version", models.CharField(max_length=50, null=True)),
                ("mol_type", models.CharField(max_length=50, null=True)),
                ("organism", models.CharField(max_length=50, null=True)),
                ("length", models.IntegerField(null=True)),
                ("definition", models.TextField(null=True)),
                ("gene", models.CharField(max_length=50, null=True)),
                (
                    "other",
                    models.JSONField(
                        help_text="Other information about the sequence. Information which does not fit into the above categories.",
                        null=True,
                    ),
                ),
                ("environment", models.ManyToManyField(to="dnarecords.Environment")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Taxonomy",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, null=True)),
                (
                    "description",
                    models.TextField(
                        help_text="A description of the taxonomy. More information if no url can be provided.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EnsemblRecord",
            fields=[
                (
                    "sequence_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dnarecords.sequence",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("dnarecords.sequence",),
        ),
        migrations.CreateModel(
            name="GenbankRecord",
            fields=[
                (
                    "sequence_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dnarecords.sequence",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("dnarecords.sequence",),
        ),
        migrations.CreateModel(
            name="SequenceHomology",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=50, null=True)),
                ("type", models.CharField(max_length=50, null=True)),
                (
                    "base_sequence",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_sequence",
                        to="dnarecords.sequence",
                    ),
                ),
                (
                    "relation_sequence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_sequences",
                        to="dnarecords.sequence",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sequence",
            name="taxonomy",
            field=models.ManyToManyField(to="dnarecords.Taxonomy"),
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("type", models.CharField(max_length=50, null=True)),
                ("raw_location", models.CharField(max_length=50, null=True)),
                ("start_location", models.IntegerField(null=True)),
                ("end_location", models.IntegerField(null=True)),
                (
                    "other_data",
                    models.JSONField(
                        help_text="Other information about the feature. Information which does not fit into the above categories. properties of features may not be consistent across features so this area will contain the general information.",
                        null=True,
                    ),
                ),
                (
                    "sequence",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dnarecords.sequence",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DatabaseSequenceReference",
            fields=[
                (
                    "databasereference_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dnarecords.databasereference",
                    ),
                ),
                (
                    "sequence",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dnarecords.sequence",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("dnarecords.databasereference",),
        ),
        migrations.CreateModel(
            name="DatabaseFeatureReference",
            fields=[
                (
                    "databasereference_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dnarecords.databasereference",
                    ),
                ),
                (
                    "feature",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dnarecords.feature",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("dnarecords.databasereference",),
        ),
    ]
